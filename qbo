#!/usr/bin/env bash
set -e

EXITCODE=0


debug=0;
build_type="prod"
clean=0

# bits of this were adapted from lxc-checkconfig
# see also https://github.com/lxc/lxc/blob/lxc-1.0.2/src/lxc/lxc-checkconfig.in

exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    if [ $exit_code -ne 0 ]; then
        >&2 echo "\"${last_command}\" command failed with exit code ${exit_code}."
        exit $exit_code
    fi
}

possibleConfigs=(
	# '/proc/config.gz'
	"/boot/config-$(uname -r)"
	"/usr/src/linux-$(uname -r)/.config"
	'/usr/src/linux/.config'
)

if [ $# -gt 0 ]; then
	CONFIG="$1"
else
	: "${CONFIG:="${possibleConfigs[0]}"}"
fi

if ! command -v zgrep &> /dev/null; then
	zgrep() {
		zcat "$2" | grep "$1"
	}
fi

kernelVersion="$(uname -r)"
kernelMajor="${kernelVersion%%.*}"
kernelMinor="${kernelVersion#$kernelMajor.}"
kernelMinor="${kernelMinor%%.*}"

is_set() {
	zgrep "CONFIG_$1=[y|m]" "$CONFIG" > /dev/null
}
is_set_in_kernel() {
	zgrep "CONFIG_$1=y" "$CONFIG" > /dev/null
}
is_set_as_module() {
	zgrep "CONFIG_$1=m" "$CONFIG" > /dev/null
}

color() {
	local codes=()
	if [ "$1" = 'bold' ]; then
		codes=("${codes[@]}" '1')
		shift
	fi
	if [ "$#" -gt 0 ]; then
		local code=
		case "$1" in
			# see https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
			black) code=30 ;;
			red) code=31 ;;
			green) code=32 ;;
			yellow) code=33 ;;
			blue) code=34 ;;
			magenta) code=35 ;;
			cyan) code=36 ;;
			white) code=37 ;;
		esac
		if [ "$code" ]; then
			codes=("${codes[@]}" "$code")
		fi
	fi
	local IFS=';'
	echo -en '\033['"${codes[*]}"'m'
}
wrap_color() {
	text="$1"
	shift
	color "$@"
	echo -n "$text"
	color reset
	echo
}

wrap_good() {
	echo "$(wrap_color "$1" white): $(wrap_color "$2" green)"
}
wrap_bad() {
	echo "$(wrap_color "$1" bold): $(wrap_color "$2" bold red)"
}
wrap_warning() {
    echo "$(wrap_color "$1" bold): $(wrap_color "$2" bold yellow)"
	#wrap_color >&2 "$*" red
}

check_flag() {
	if is_set_in_kernel "$1"; then
		wrap_good "CONFIG_$1" 'enabled'
	elif is_set_as_module "$1"; then
		wrap_good "CONFIG_$1" 'enabled (as module)'
	else
		wrap_bad "CONFIG_$1" 'missing'
		EXITCODE=1
	fi
}

check_flags() {
	for flag in "$@"; do
		echo -n "- "
		check_flag "$flag"
	done
}

check_command() {
	if command -v "$1" > /dev/null 2>&1; then
		wrap_good "$1 command" 'available'
	else
		wrap_bad "$1 command" 'missing'
		EXITCODE=1
	fi
}

check_device() {
	if [ -c "$1" ]; then
		wrap_good "$1" 'present'
	else
		wrap_bad "$1" 'missing'
		EXITCODE=1
	fi
}

check_distro_userns() {
	source /etc/os-release 2> /dev/null || /bin/true
	if [[ "${ID}" =~ ^(centos|rhel)$ && "${VERSION_ID}" =~ ^7 ]]; then
		# this is a CentOS7 or RHEL7 system
		grep -q "user_namespace.enable=1" /proc/cmdline || {
			# no user namespace support enabled
			wrap_bad "  (RHEL7/CentOS7" "User namespaces disabled; add 'user_namespace.enable=1' to boot command line)"
			EXITCODE=1
		}
	fi
}

run_linux_tests() {
    if [ ! -e "$CONFIG" ]; then
        wrap_warning "warning: $CONFIG does not exist, searching other paths for kernel config ..."
        for tryConfig in "${possibleConfigs[@]}"; do
            if [ -e "$tryConfig" ]; then
                CONFIG="$tryConfig"
                break
            fi
        done
        if [ ! -e "$CONFIG" ]; then
            wrap_warning "error: cannot find kernel config"
            wrap_warning "  try running this script again, specifying the kernel config:"
            wrap_warning "    CONFIG=/path/to/kernel/.config $0 or $0 /path/to/kernel/.config"
            exit 1
        fi
    fi

    wrap_color "info: reading kernel config from $CONFIG ..." white
    echo

    echo 'Generally Necessary:'

    echo -n '- '
    cgroupSubsystemDir="$(awk '/[, ](cpu|cpuacct|cpuset|devices|freezer|memory)[, ]/ && $3 == "cgroup" { print $2 }' /proc/mounts | head -n1)"
    cgroupDir="$(dirname "$cgroupSubsystemDir")"
    if [ -d "$cgroupDir/cpu" ] || [ -d "$cgroupDir/cpuacct" ] || [ -d "$cgroupDir/cpuset" ] || [ -d "$cgroupDir/devices" ] || [ -d "$cgroupDir/freezer" ] || [ -d "$cgroupDir/memory" ]; then
        echo "$(wrap_good 'cgroup hierarchy' 'properly mounted') [$cgroupDir]"
    else
        if [ "$cgroupSubsystemDir" ]; then
            echo "$(wrap_bad 'cgroup hierarchy' 'single mountpoint!') [$cgroupSubsystemDir]"
        else
            wrap_bad 'cgroup hierarchy' 'nonexistent??'
            echo 'Set `systemd.unified_cgroup_hierarchy=0"` to run kubernetes verisons earlier than `v1.24.0`' 
            read -n 1 -s -r -p "<Press any key to continue>"
            

        fi
        EXITCODE=1
        echo "    $(wrap_color '(see https://github.com/tianon/cgroupfs-mount)' yellow)"
    fi


    check_limit_under__max_user_watches() {
        if [ "$(cat "$1")" -lt "$2" ]; then
            wrap_warning "- $1" "$(cat "$1")"   
            echo "sudo sysctl fs.inotify.max_user_watches=524288"
            read -n 1 -s -r -p "<Press any key to run command>"
            sudo sysctl fs.inotify.max_user_watches=524288
        else
            wrap_good "- $1" "$(cat "$1")"
        fi
    }

    check_limit_under__max_user_instances() {
        if [ "$(cat "$1")" -lt "$2" ]; then
            wrap_warning "- $1" "$(cat "$1")"
            echo "Set to $2 to run more nodes"
            echo "sudo sysctl fs.inotify.max_user_instances=512" 
            read -n 1 -s -r -p "<Press any key to continue cmd>"
            sudo sysctl fs.inotify.max_user_instances=512

        else
            wrap_good "- $1" "$(cat "$1")"
        fi
    }


    echo 'Limits:'
    check_limit_under__max_user_watches /proc/sys/fs/inotify/max_user_watches 524288
    echo
    check_limit_under__max_user_instances /proc/sys/fs/inotify/max_user_instances 512
    echo


    # SE linux
    check_selinux() {
        if [ -f "/etc/selinux/config" ]; then
            sestatus
            status=$(sestatus  | awk '{print $3}')
            echo $status
            if [ "$status" != "disabled" ] && [ "$status" != "permissive" ] ; then
                wrap_color "  SELinux should be disabled or in permissive mode, for example set: setenforce 0" bold black
                exit 1
            fi
        fi

    }

    echo 'SELinux:'
    check_selinux


}

bin="api"
machine=Linux

o="$(uname -s)"
case "${o}" in
    Linux*) 
            
    machine=Linux;;
    Darwin*)  
    machine=Mac;;
    *)          
    machine="UNKNOWN:${o}"
esac

exit_on_error() {
    exit_code=$1
    last_command=${@:2}
    if [ $exit_code -ne 0 ]; then
        >&2 echo "\"${last_command}\" command failed with exit code ${exit_code}."
        exit $exit_code
    fi
}

repo="qbo-home"
name="qbo"

usage() {
    # echo "$0 -s   - drop to shell"
    echo "qbo start api         -- start $bin"
    echo " -c                   -- start clean"
    echo " -d                   -- start with valgrind"
    echo "qbo stop api          -- stop $bin api"
    echo "qbo attach terminal   -- attach $bin. (CTRL-p, CTL-q) to exit"
    echo "qbo logs              -- get $bin logs" 
    echo " -f                   -- follow logs"
    exit 1
}

function start {

    echo "clean = $clean"
    if [ $clean = 1 ]; then 
        echo "clean start"
        # i=`docker ps -aqf "name=qbo$"`
        # if [ $ -z "$i" ]; then
        #     docker stop $i
        # fi
        docker rm $(docker ps -qa) -f
        docker system prune -f
        sudo rm -f ~/.qbo/cache.db
        sudo rm -f ~/.qbo/.qbo.db
        sudo rm -f ~/.qbo/cmd.log
        sudo rm -f ~/.qbo/qbo.dot
        sudo ipvsadm -C
        sudo ipvsadm -Ln
    fi

    if [ ! -d ~/.qbo ]; then
        mkdir ~/.qbo
    fi

    if [ ! -f ~/.qbo/api.json ]; then
       cat << EOF > ~/.qbo/api.json
{
"registry_user":"kindest",
"registry_auth":"hub.docker.com",
"registry_token":"",
"registry_repo":"",
"registry_hostname":"hub.docker.com",
"registry_type":"docker"
}
EOF
    fi

    if [ ! -f ~/.qbo/cli.json ]; then
 cat << EOF > ~/.qbo/cli.json
{"api_ip":"localhost", "cli_ssl":"0"}
EOF
    fi

    g=0
    if [ $machine = "Linux" ]; then
        echo "OS = $machine"
        run_linux_tests
        if type getent > /dev/null 2>&1; then
            g=$(getent group docker | awk -F ':' '{print $3}')
 
        else
            g=$(cat /etc/group | grep docker: | awk -F ':' '{print $3}')
    
        fi
    else 
        echo "OS = $machine"

        printf "\n"


        wrap_color "# -----WARNING-----" yellow
        wrap_color "# QBO requires docker.raw.sock to work in MAC OS. " grey
        wrap_color "# While Docker Desktop is running, run the following cmds to fix this: " grey
        wrap_color "sudo rm /var/run/docker.sock" bold white
        wrap_color  "sudo ln -s ~/Library/Containers/com.docker.docker/Data/docker.raw.sock /var/run/docker.sock" bold white
        wrap_color "# Restart Docker Desktop" grey
        wrap_color "# -----WARNING-----" yellow


    fi

    echo "USER = $(whoami)"
    echo "UID = $(id -u)"
    echo "GID = $g"


    opt="";
    if [ $debug = 1 ]; then
        opt="-d";
    fi
    
    if [ $build_type == "stage" ]; then
        i="registry.eadem.com/alex/$repo/$name-$bin"
        docker pull $i
        docker run --rm --name qbo -d -p9601:9601 -it -e QBO_OPTS=$@ -e HUSER=$(whoami) -e HUID=$(id -u) -e HGID=$g -v $HOME/.qbo/:/tmp/qbo/ -v /var/run/docker.sock:/var/run/docker.sock $i "start $opt"
    else
        i="eadem/$name-$bin"
        docker pull $i
        docker run --rm --name qbo -d -p9601:9601 -it -e QBO_OPTS=$@ -e HUSER=$(whoami) -e HUID=$(id -u) -e HGID=$g -v $HOME/.qbo/:/tmp/qbo/ -v /var/run/docker.sock:/var/run/docker.sock $i "start $opt"
    fi



    exit_on_error $?
    tail -f ~/.qbo/messages


}

function stop {
    
    qbo_id=`docker ps -aqf "name=qbo$"`

    if [ -z "$qbo_id" ]; then
        echo "qbo $bin not running."
	    exit 1
    fi

    pid=`docker exec $qbo_id ps -ef | grep "[a]pi" | awk -F' ' '{print $2}'`
    if [ ! -z "$pid" ]; then
        docker exec $qbo_id kill -s SIGINT $pid
    fi

    docker stop $qbo_id
    exit_on_error $?
    if [ -f ~/.qbo/valgrind.log ]; then
        tail -f ~/.qbo/valgrind.log
    fi

    exit 0

}

function status {

    docker ps --filter="name=qbo"

}

function logs {

        if [ $follow = 1 ]; then
            tail -f ~/.qbo/messages
        else
            #journalctl -o cat -t $i
            vi ~/.qbo/messages
        fi

        exit 0

}


if [ -z $1 ]; then
    usage
fi

if [ -z $1 ]; then
    usage
fi

if [ $1 = "start" ]; then
    echo -e "\033[38;5;${color}m  => $@\033[0m"
    cmd=$1;
    # move next
    shift $((OPTIND))
    if [ -z $1 ]; then
        usage
    fi
    if [ $1 = "api" ]; then
        bin="api";
    else
        #docker run --rm --name qbo-cli -i -e QBO_OPTS=--debug --user 1000:1000 -v /home/alex/.qbo:/tmp/qbo qbo-cli-dev valgrind --leak-check=full cli $@
        docker exec qbo cli $@
        exit $?
        #usage
    fi
    shift $((OPTIND))

    while getopts "cdl:r:" opt; do
    case ${opt} in
        r ) # build type

            if [ $OPTARG = "stage" ]; then
                build_type=$OPTARG
            elif [ $OPTARG = "prod" ]; then
                build_type=$OPTARG
                
            else
                usage
            fi
            
        ;;
        c ) 
            echo "-- clean start"
            clean=1;  
        ;;
        d ) 
            echo "-- start debug"
            debug=1;
        ;;
        l ) # ll

            if [ $OPTARG = "info" ]; then
                log_level=$OPTARG
            elif [ $OPTARG = "debug" ]; then
                log_level=$OPTARG
            elif [ $OPTARG = "notice" ]; then
                log_level=$OPTARG
            fi
               
        ;;
        \? ) 
		echo "Invalid option: $OPTARG" 1>&2	
		usage
        ;;
    esac
    done
    start
elif [ $1 = "attach" ]; then
    if [ -z $2 ]; then
        usage
    else 
        if  [[ ! "terminal" =~ "$2".* ]]; then
          usage
        fi
    fi
    docker attach qbo
elif [ $1 = "logs" ]; then
echo -e "\033[38;5;${color}m => $@\033[0m"
    cmd=$1;
    if [ -z $2 ]; then
        usage
    fi
    if [ ! "$2" = "api" ]; then
        usage
    fi
    
    shift $((OPTIND))
    shift $((OPTIND))

    while getopts "f" opt; do
    case ${opt} in
        f ) # run internal image
            follow=1;
			echo "-- follow logs"
        ;;
        \? ) 
		echo "Invalid option: $OPTARG" 1>&2	
		usage
        ;;
    esac
    done
    logs
elif [ $1 = "stop" ]; then
echo -e "\033[38;5;${color}m => $@\033[0m"
    if [ -z $2 ]; then
       usage
    else
        if  [ ! "$2" = "api" ]; then
            usage
        fi
    fi
    
    stop
else
    # local
    # valgrind --leak-check=full
    docker exec qbo cli $@
    exit $?
fi

exit 0